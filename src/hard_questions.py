import json


# -----------------------------------------------------------------------------
# Exercise (Very-Hard): Error Correction

# You will be given an object (anything goes) that you must ensure can travel
# through space and remain unchanged due to the cosmic radiation.

# You "must" encode this object as a bit sequence (a string or something else)
# so that when noise is introduced you will be able to decode the string
# and regain your original object that was encoded. Noise in this case will
# be represented by random bit flips in any sequence generated by encode_bit.
# Currently you must achieve an accuracy of 99% when there is a noise
# ratio of 1/10 bits flipped. These values may be changed in the unit
# tests if it is too aggressive and difficult to solve.

# The idea behind this is...
#   Original Bit ->
#       encodeBit ->
#           Noise Introduced ->
#       decodeBitSequence ->
#   Original Bit
# -----------------------------------------------------------------------------
def encode_object(obj=None):
    return [0 for _ in range(100)]


def decode_bit_sequence(encoded_bit_sequence = None):
    return False


def object_to_bit_sequence(obj=None):
    return ' '.join(format(ord(x), 'b') for x in json.dumps(obj))
